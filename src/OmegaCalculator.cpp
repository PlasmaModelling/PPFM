#include <stdexcept>
#include <numbers>
#include"Species.h"
#include "OmegaCalculator.h"
#include "TransportCrossSection.h"
#include <numeric>
#include <filesystem>

OmegaCalculator::OmegaCalculator(Species*sp1,Species*sp2) : sp1(sp1), sp2(sp2) {}
OmegaCalculator::OmegaCalculator(InteractionInterface* i) : sp1(i->GetSp1()), sp2(i->GetSp2()){}

LoaderOmega::LoaderOmega(InteractionInterface* i) 
    : OmegaCalculator(i->GetSp1(), i->GetSp2()) {
    
    interactionName = i->InteractionName();
    Init();

}

LoaderOmega::LoaderOmega( const std::string& prefix , InteractionInterface* i ) 
    : OmegaCalculator(i->GetSp1(), i->GetSp2()) {

    interactionName = i->InteractionName() ; 
    this->customPrefix = prefix + "_" ;
    Init() ;
    
}

double LoaderOmega::Compute(int l, int s, double temperatura, double lambda, CsCalculator* TcS) {
    
    int comp = 0;

    // Determina il valore di `comp` in base ai parametri `l` e `s`
    switch (l) {
        case 1:
            comp = s - 1; // (l,s) = (1,1)...(1,7)
            break;
        case 2:
            comp = 7 + (s - 2); // (l,s) = (2,2)...(2,6)
            break;
        case 3:
            comp = 12 + (s - 3); // (l,s) = (3,3)...(3,5)
            break;
        case 4:
            comp = 15; // (l,s) = (4,4)
            break;
        default:
            throw std::invalid_argument("Invalid combination of l and s in LoaderOmega::Compute");
    }

    // Utilizza i dati caricati per interpolare il valore richiesto
    return interpolateSpline(temperatures, qColumns[comp], temperatura);
}

void LoaderOmega::ParseFile(std::ifstream& file) {

    std::string line;
    std::vector<double> temps;
    std::vector<std::vector<double>> qs(16, std::vector<double>());

    // Legge e popola i dati da file
    while (getline(file, line)) {
        std::istringstream iss(line);
        double temp;

        // Legge il valore della temperatura
        iss >> temp;
        temps.push_back(temp);

        // Legge i valori di Q
        for (int i = 0; i < 16; ++i) {
            double qValue;
            if (iss >> qValue) {
                qs[i].push_back(qValue);
            }
        }
    }

    // Salva i dati caricati nei membri della classe
    temperatures = temps;
    qColumns = qs;

}


CoulombOmega::CoulombOmega(ChargedSpecies* sp1, ChargedSpecies* sp2) : OmegaCalculator(sp1,sp2) {
        
    interactionName = sp1->getFormula()+"_"+sp2->getFormula() ;

    qcTxt = {
    // adimensional temperature T*
    {   1.000000e-01, 2.000000e-01, 3.000000e-01, 4.000000e-01, 6.000000e-01, 8.000000e-01, 1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 6.000000e+00, 8.000000e+00, 1.000000e+01, 2.000000e+01, 3.000000e+01, 4.000000e+01, 6.000000e+01, 8.000000e+01, 1.000000e+02, 2.000000e+02, 3.000000e+02, 4.000000e+02, 6.000000e+02, 8.000000e+02, 1.000000e+03, 2.000000e+03, 3.000000e+03, 4.000000e+03, 6.000000e+03, 8.000000e+03, 1.000000e+04 },
    // (l,s) = (1,1) attractive
    {   6.300000e-02, 1.364000e-01, 1.961000e-01, 2.480000e-01, 3.297000e-01, 3.962000e-01, 4.519000e-01, 6.467000e-01, 7.746000e-01, 8.719000e-01, 1.017300e+00, 1.125900e+00, 1.213000e+00, 1.497200e+00, 1.671600e+00, 1.798400e+00, 1.980700e+00, 2.112300e+00, 2.215600e+00, 2.542700e+00, 2.738000e+00, 2.878000e+00, 3.076700e+00, 3.218500e+00, 3.328900e+00, 3.572600e+00, 3.786500e+00, 3.971100e+00, 4.253000e+00, 4.420500e+00, 4.475900e+00 },
    // (l,s) = (1,1) repulsive
    {   2.240000e-02, 5.110000e-02, 7.970000e-02, 1.072000e-01, 1.584000e-01, 2.050000e-01, 2.474000e-01, 4.177000e-01, 5.442000e-01, 6.455000e-01, 8.026000e-01, 9.230000e-01, 1.020700e+00, 1.343100e+00, 1.541200e+00, 1.684700e+00, 1.889800e+00, 2.036800e+00, 2.151500e+00, 2.508700e+00, 2.716800e+00, 2.863500e+00, 3.068700e+00, 3.213500e+00, 3.325600e+00, 3.570800e+00, 3.785900e+00, 3.971100e+00, 4.253600e+00, 4.421100e+00, 4.476300e+00 },
    // (1,2)
    {   4.770000e-02, 8.980000e-02, 1.206000e-01, 1.451000e-01, 1.830000e-01, 2.122000e-01, 2.362000e-01, 3.169000e-01, 3.684000e-01, 4.066000e-01, 4.625000e-01, 5.034000e-01, 5.358000e-01, 6.398000e-01, 7.021000e-01, 7.471000e-01, 8.109000e-01, 8.567000e-01, 8.927000e-01, 1.005900e+00, 1.073000e+00, 1.120700e+00, 1.188200e+00, 1.236200e+00, 1.273300e+00, 1.354800e+00, 1.426400e+00, 1.488000e+00, 1.582200e+00, 1.638100e+00, 1.656500e+00 },
    {   1.680000e-02, 3.630000e-02, 5.470000e-02, 7.160000e-02, 1.016000e-01, 1.275000e-01, 1.503000e-01, 2.352000e-01, 2.934000e-01, 3.376000e-01, 4.031000e-01, 4.510000e-01, 4.888000e-01, 6.083000e-01, 6.787000e-01, 7.288000e-01, 7.994000e-01, 8.493000e-01, 8.881000e-01, 1.006700e+00, 1.074500e+00, 1.122500e+00, 1.189400e+00, 1.236900e+00, 1.274000e+00, 1.355600e+00, 1.427100e+00, 1.488800e+00, 1.582900e+00, 1.638700e+00, 1.657100e+00 },
    // (1,3)
    {   3.650000e-02, 6.260000e-02, 8.070000e-02, 9.470000e-02, 1.160000e-01, 1.323000e-01, 1.455000e-01, 1.893000e-01, 2.168000e-01, 2.370000e-01, 2.664000e-01, 2.877000e-01, 3.045000e-01, 3.581000e-01, 3.898000e-01, 4.127000e-01, 4.451000e-01, 4.685000e-01, 4.867000e-01, 5.441000e-01, 5.780000e-01, 6.018000e-01, 6.357000e-01, 6.598000e-01, 6.783000e-01, 7.189000e-01, 7.546000e-01, 7.854000e-01, 8.324000e-01, 8.603000e-01, 8.696000e-01 },
    {   1.330000e-02, 2.770000e-02, 4.050000e-02, 5.200000e-02, 7.160000e-02, 8.800000e-02, 1.020000e-01, 1.518000e-01, 1.841000e-01, 2.081000e-01, 2.428000e-01, 2.676000e-01, 2.870000e-01, 3.475000e-01, 3.829000e-01, 4.079000e-01, 4.432000e-01, 4.680000e-01, 4.873000e-01, 5.456000e-01, 5.787000e-01, 6.027000e-01, 6.361000e-01, 6.597000e-01, 6.785000e-01, 7.194000e-01, 7.553000e-01, 7.862000e-01, 8.333000e-01, 8.611000e-01, 8.703000e-01 },
    // (1,4)
    {   2.850000e-02, 4.600000e-02, 5.780000e-02, 6.690000e-02, 8.060000e-02, 9.100000e-02, 9.930000e-02, 1.269000e-01, 1.440000e-01, 1.566000e-01, 1.748000e-01, 1.880000e-01, 1.983000e-01, 2.307000e-01, 2.497000e-01, 2.634000e-01, 2.828000e-01, 2.969000e-01, 3.081000e-01, 3.433000e-01, 3.634000e-01, 3.778000e-01, 3.981000e-01, 4.125000e-01, 4.236000e-01, 4.481000e-01, 4.696000e-01, 4.881000e-01, 5.164000e-01, 5.332000e-01, 5.388000e-01 },
    {   1.100000e-02, 2.210000e-02, 3.160000e-02, 3.990000e-02, 5.360000e-02, 6.480000e-02, 7.420000e-02, 1.065000e-01, 1.268000e-01, 1.416000e-01, 1.627000e-01, 1.777000e-01, 1.894000e-01, 2.254000e-01, 2.462000e-01, 2.610000e-01, 2.817000e-01, 2.964000e-01, 3.078000e-01, 3.429000e-01, 3.633000e-01, 3.778000e-01, 3.981000e-01, 4.125000e-01, 4.236000e-01, 4.481000e-01, 4.696000e-01, 4.881000e-01, 5.164000e-01, 5.332000e-01, 5.388000e-01 },
    // (1,5)
    {   2.270000e-02, 3.530000e-02, 4.370000e-02, 5.000000e-02, 5.960000e-02, 6.680000e-02, 7.250000e-02, 9.150000e-02, 1.032000e-01, 1.118000e-01, 1.241000e-01, 1.330000e-01, 1.400000e-01, 1.616000e-01, 1.744000e-01, 1.835000e-01, 1.967000e-01, 2.062000e-01, 2.137000e-01, 2.373000e-01, 2.506000e-01, 2.602000e-01, 2.737000e-01, 2.833000e-01, 2.908000e-01, 3.072000e-01, 3.215000e-01, 3.339000e-01, 3.527000e-01, 3.638000e-01, 3.675000e-01 },
    {   9.300000e-03, 1.810000e-02, 2.550000e-02, 3.170000e-02, 4.190000e-02, 5.000000e-02, 5.670000e-02, 7.920000e-02, 9.300000e-02, 1.030000e-01, 1.172000e-01, 1.272000e-01, 1.349000e-01, 1.589000e-01, 1.727000e-01, 1.825000e-01, 1.963000e-01, 2.061000e-01, 2.136000e-01, 2.370000e-01, 2.506000e-01, 2.602000e-01, 2.737000e-01, 2.833000e-01, 2.908000e-01, 3.072000e-01, 3.215000e-01, 3.339000e-01, 3.527000e-01, 3.638000e-01, 3.675000e-01 },
    // (1,6) obtained through the use of recursion formulae 
    {   0.0122500000, 0.0191500000, 0.0234250000, 0.0265857000, 0.0316000000, 0.0352429000, 0.0379464000, 0.0479429000, 0.0537750000, 0.0580071000, 0.0643214000, 0.0687714000, 0.0720214000, 0.0832571000, 0.0895464000, 0.0939929000, 0.1007820000, 0.1055290000, 0.1090320000, 0.1212860000, 0.1277540000, 0.1324360000, 0.1393250000, 0.1440930000, 0.1473250000, 0.1557930000, 0.1636110000, 0.1700640000, 0.1795540000, 0.1840140000, 0.1850710000 }, 
    {   0.0052785700, 0.0102071000, 0.0142071000, 0.0174643000, 0.0229107000, 0.0271143000, 0.0303500000, 0.0421929000, 0.0490500000, 0.0539429000, 0.0611929000, 0.0661286000, 0.0696821000, 0.0821500000, 0.0888786000, 0.0936357000, 0.1006790000, 0.1055210000, 0.1089750000, 0.1211430000, 0.1277860000, 0.1324360000, 0.1393250000, 0.1440930000, 0.1473250000, 0.1557930000, 0.1636110000, 0.1700640000, 0.1795540000, 0.1840140000, 0.1850710000 }, 
    // (1,7) obtained through the use of recursion formulae 
    {   0.0065562500, 0.0102734000, 0.0124096000, 0.0140013000, 0.0166116000, 0.0184147000, 0.0197080000, 0.0249607000, 0.0278310000, 0.0299272000, 0.0331699000, 0.0353482000, 0.0368696000, 0.0427239000, 0.0457797000, 0.0479766000, 0.0514725000, 0.0537955000, 0.0554464000, 0.0618129000, 0.0649221000, 0.0672337000, 0.0707554000, 0.0730464000, 0.0744321000, 0.0789143000, 0.0831433000, 0.0864319000, 0.0910846000, 0.0926969000, 0.0928661000 }, 
    {   0.0029473200, 0.0056616100, 0.0077839300, 0.0094796900, 0.0123600000, 0.0144871000, 0.0160507000, 0.0222652000, 0.0256266000, 0.0280362000, 0.0317388000, 0.0341254000, 0.0357859000, 0.0422748000, 0.0455161000, 0.0478527000, 0.0514536000, 0.0537978000, 0.0554074000, 0.0617471000, 0.0649516000, 0.0672297000, 0.0707554000, 0.0730464000, 0.0744321000, 0.0789143000, 0.0831433000, 0.0864319000, 0.0910846000, 0.0926969000, 0.0928661000 }, 
    // (2,2)
    {   3.840000e-02, 9.670000e-02, 1.557000e-01, 2.100000e-01, 3.037000e-01, 3.818000e-01, 4.483000e-01, 6.840000e-01, 8.385000e-01, 9.541000e-01, 1.124000e+00, 1.248600e+00, 1.347300e+00, 1.662600e+00, 1.851700e+00, 1.987200e+00, 2.180100e+00, 2.318400e+00, 2.426600e+00, 2.767200e+00, 2.968700e+00, 3.112100e+00, 3.314600e+00, 3.458300e+00, 3.569900e+00, 3.814900e+00, 4.029900e+00, 4.215200e+00, 4.497900e+00, 4.665700e+00, 4.721100e+00 },
    {   3.040000e-02, 6.970000e-02, 1.086000e-01, 1.459000e-01, 2.144000e-01, 2.757000e-01, 3.310000e-01, 5.460000e-01, 6.999000e-01, 8.197000e-01, 1.000600e+00, 1.135800e+00, 1.243500e+00, 1.589200e+00, 1.795900e+00, 1.943800e+00, 2.153100e+00, 2.301900e+00, 2.417100e+00, 2.771300e+00, 2.974700e+00, 3.117700e+00, 3.318500e+00, 3.461000e+00, 3.571900e+00, 3.816200e+00, 4.030700e+00, 4.215600e+00, 4.498000e+00, 4.665700e+00, 4.721100e+00 },
    // (2,3)
    {   3.230000e-02, 7.850000e-02, 1.205000e-01, 1.567000e-01, 2.157000e-01, 2.626000e-01, 3.015000e-01, 4.339000e-01, 5.177000e-01, 5.794000e-01, 6.689000e-01, 7.339000e-01, 7.851000e-01, 9.470000e-01, 1.043200e+00, 1.111800e+00, 1.209700e+00, 1.280000e+00, 1.334900e+00, 1.507600e+00, 1.608700e+00, 1.680800e+00, 1.782300e+00, 1.854000e+00, 1.909900e+00, 2.032500e+00, 2.140000e+00, 2.232700e+00, 2.374100e+00, 2.458000e+00, 2.485700e+00 },
    {   2.480000e-02, 5.460000e-02, 8.290000e-02, 1.092000e-01, 1.558000e-01, 1.960000e-01, 2.313000e-01, 3.619000e-01, 4.505000e-01, 5.173000e-01, 6.156000e-01, 6.874000e-01, 7.437000e-01, 9.213000e-01, 1.026200e+00, 1.100800e+00, 1.205700e+00, 1.280100e+00, 1.337400e+00, 1.512000e+00, 1.612000e+00, 1.682900e+00, 1.783000e+00, 1.854400e+00, 1.910300e+00, 2.032800e+00, 2.140200e+00, 2.232900e+00, 2.374200e+00, 2.458000e+00, 2.485700e+00 },
    // (2,4)
    {   2.840000e-02, 6.520000e-02, 9.560000e-02, 1.208000e-01, 1.606000e-01, 1.914000e-01, 2.166000e-01, 3.007000e-01, 3.530000e-01, 3.924000e-01, 4.468000e-01, 4.869000e-01, 5.183000e-01, 6.163000e-01, 6.738000e-01, 7.149000e-01, 7.738000e-01, 8.164000e-01, 8.502000e-01, 9.566000e-01, 1.016100e+00, 1.058800e+00, 1.119400e+00, 1.162800e+00, 1.195900e+00, 1.269200e+00, 1.333600e+00, 1.389100e+00, 1.474100e+00, 1.524600e+00, 1.541300e+00 },
    {   2.080000e-02, 4.450000e-02, 6.610000e-02, 8.560000e-02, 1.193000e-01, 1.476000e-01, 1.719000e-01, 2.587000e-01, 3.154000e-01, 3.574000e-01, 4.182000e-01, 4.620000e-01, 4.962000e-01, 6.027000e-01, 6.649000e-01, 7.089000e-01, 7.707000e-01, 8.145000e-01, 8.483000e-01, 9.534000e-01, 1.014900e+00, 1.058300e+00, 1.119300e+00, 1.162400e+00, 1.195900e+00, 1.269400e+00, 1.333900e+00, 1.389500e+00, 1.474400e+00, 1.524700e+00, 1.541300e+00 },
    // (2,5)
    {   2.530000e-02, 5.460000e-02, 7.750000e-02, 9.590000e-02, 1.244000e-01, 1.461000e-01, 1.637000e-01, 2.216000e-01, 2.573000e-01, 2.833000e-01, 3.207000e-01, 3.477000e-01, 3.688000e-01, 4.354000e-01, 4.748000e-01, 5.030000e-01, 5.429000e-01, 5.713000e-01, 5.934000e-01, 6.622000e-01, 7.026000e-01, 7.313000e-01, 7.717000e-01, 8.004000e-01, 8.227000e-01, 8.920000e-01, 9.325000e-01, 9.613000e-01, 1.001800e+00, 1.030600e+00, 1.045700e+00 },
    {   1.790000e-02, 3.720000e-02, 5.430000e-02, 6.940000e-02, 9.480000e-02, 1.158000e-01, 1.335000e-01, 1.950000e-01, 2.342000e-01, 2.628000e-01, 3.039000e-01, 3.333000e-01, 3.562000e-01, 4.272000e-01, 4.686000e-01, 4.979000e-01, 5.390000e-01, 5.681000e-01, 5.906000e-01, 6.604000e-01, 7.011000e-01, 7.300000e-01, 7.706000e-01, 7.995000e-01, 8.218000e-01, 8.912000e-01, 9.317000e-01, 9.605000e-01, 1.001100e+00, 1.029800e+00, 1.044600e+00 },
    // (2,6) obtained through the use of recursion formulae 
    {   0.0147429   , 0.0310286   ,    0.0431750, 0.0526143   , 0.0675786   , 0.0786643, 0.0870607      , 0.1174860   , 0.1352610   , 0.1480360   , 0.1672500   , 0.1807210   , 0.1905460   , 0.2252710   , 0.2446430   , 0.2583790   , 0.2787680   , 0.2928640   , 0.3031040   , 0.3389000   , 0.3587040   , 0.3726360   , 0.3932540   , 0.4074860   , 0.4178070   , 0.4538430   , 0.4736750   , 0.4876570   , 0.5083250   , 0.5215710   , 0.5282430    }, 
    {   0.0103286   , 0.0212000   ,    0.0306000, 0.0386714   , 0.0523714   , 0.0634286, 0.0721071      , 0.1046930   , 0.1243640   , 0.1384210   , 0.1595040   , 0.1741210   , 0.1847250   , 0.2216290   , 0.2418750   , 0.2560710   , 0.2770210   , 0.2914210   , 0.3018110   , 0.3380930   , 0.3580070   , 0.3720290   , 0.3927460   , 0.4070640   , 0.4173610   , 0.4534500   , 0.4732750   , 0.4872640   , 0.5079750   , 0.5211140   , 0.5275860    }, 
    // (3,3)
    {   4.290000e-02, 8.240000e-02, 1.160000e-01, 1.456000e-01, 1.957000e-01, 2.373000e-01, 2.726000e-01, 3.972000e-01, 4.785000e-01, 5.390000e-01, 6.276000e-01, 6.922000e-01, 7.431000e-01, 9.049000e-01, 1.001100e+00, 1.069900e+00, 1.167800e+00, 1.238000e+00, 1.293000e+00, 1.465900e+00, 1.567200e+00, 1.639300e+00, 1.740500e+00, 1.812300e+00, 1.868200e+00, 1.990700e+00, 2.098200e+00, 2.190900e+00, 2.332300e+00, 2.416200e+00, 2.443800e+00 },
    {   2.180000e-02, 4.830000e-02, 7.380000e-02, 9.750000e-02, 1.401000e-01, 1.774000e-01, 2.102000e-01, 3.337000e-01, 4.187000e-01, 4.834000e-01, 5.794000e-01, 6.498000e-01, 7.053000e-01, 8.812000e-01, 9.854000e-01, 1.059700e+00, 1.164700e+00, 1.238800e+00, 1.296100e+00, 1.470300e+00, 1.570300e+00, 1.641100e+00, 1.741500e+00, 1.812700e+00, 1.868700e+00, 1.991200e+00, 2.098700e+00, 2.191300e+00, 2.332600e+00, 2.416400e+00, 2.444100e+00 },
    // (3,4)
    {   3.440000e-02, 6.380000e-02, 8.850000e-02, 1.097000e-01, 1.447000e-01, 1.729000e-01, 1.964000e-01, 2.773000e-01, 3.287000e-01, 3.666000e-01, 4.215000e-01, 4.614000e-01, 4.927000e-01, 5.918000e-01, 6.507000e-01, 6.928000e-01, 7.524000e-01, 7.949000e-01, 8.280000e-01, 9.310000e-01, 9.915000e-01, 1.034500e+00, 1.095100e+00, 1.138200e+00, 1.171600e+00, 1.275500e+00, 1.336300e+00, 1.379400e+00, 1.440200e+00, 1.483400e+00, 1.506000e+00 },
    {   1.830000e-02, 3.940000e-02, 5.900000e-02, 7.680000e-02, 1.078000e-01, 1.342000e-01, 1.571000e-01, 2.398000e-01, 2.947000e-01, 3.357000e-01, 3.953000e-01, 4.385000e-01, 4.723000e-01, 5.781000e-01, 6.401000e-01, 6.840000e-01, 7.457000e-01, 7.893000e-01, 8.232000e-01, 9.279000e-01, 9.891000e-01, 1.032400e+00, 1.093400e+00, 1.136700e+00, 1.170200e+00, 1.274200e+00, 1.335100e+00, 1.378300e+00, 1.439100e+00, 1.482200e+00, 1.504600e+00 },
    // (3,5)
    {   2.840000e-02, 5.140000e-02, 7.040000e-02, 8.630000e-02, 1.120000e-01, 1.323000e-01, 1.490000e-01, 2.054000e-01, 2.408000e-01, 2.666000e-01, 3.039000e-01, 3.309000e-01, 3.520000e-01, 4.186000e-01, 4.581000e-01, 4.863000e-01, 5.262000e-01, 5.546000e-01, 5.767000e-01, 6.455000e-01, 6.859000e-01, 7.146000e-01, 7.551000e-01, 7.838000e-01, 8.061000e-01, 8.753000e-01, 9.158000e-01, 9.446000e-01, 9.851000e-01, 1.013900e+00, 1.029000e+00 },
    {   1.580000e-02, 3.310000e-02, 4.860000e-02, 6.250000e-02, 8.610000e-02, 1.058000e-01, 1.225000e-01, 1.816000e-01, 2.198000e-01, 2.479000e-01, 2.884000e-01, 3.175000e-01, 3.402000e-01, 4.109000e-01, 4.521000e-01, 4.814000e-01, 5.224000e-01, 5.515000e-01, 5.740000e-01, 6.438000e-01, 6.845000e-01, 7.133000e-01, 7.540000e-01, 7.828000e-01, 8.051000e-01, 8.745000e-01, 9.151000e-01, 9.438000e-01, 9.844000e-01, 1.013100e+00, 1.027900e+00 },
    // (4,4)
    {   3.300000e-02, 7.720000e-02, 1.162000e-01, 1.498000e-01, 2.058000e-01, 2.510000e-01, 2.891000e-01, 4.212000e-01, 5.060000e-01, 5.686000e-01, 6.597000e-01, 7.258000e-01, 7.778000e-01, 9.417000e-01, 1.038600e+00, 1.108100e+00, 1.206900e+00, 1.278400e+00, 1.333900e+00, 1.507300e+00, 1.608700e+00, 1.680800e+00, 1.782300e+00, 1.854000e+00, 1.909900e+00, 2.032500e+00, 2.140000e+00, 2.232700e+00, 2.374100e+00, 2.458000e+00, 2.485700e+00 },
    {   2.550000e-02, 5.610000e-02, 8.520000e-02, 1.121000e-01, 1.596000e-01, 2.006000e-01, 2.364000e-01, 3.682000e-01, 4.571000e-01, 5.239000e-01, 6.219000e-01, 6.932000e-01, 7.492000e-01, 9.260000e-01, 1.030300e+00, 1.104700e+00, 1.209000e+00, 1.283100e+00, 1.339800e+00, 1.511200e+00, 1.610800e+00, 1.680100e+00, 1.782400e+00, 1.854100e+00, 1.909900e+00, 2.032400e+00, 2.140000e+00, 2.232700e+00, 2.374100e+00, 2.458000e+00, 2.485700e+00 }
    
    };
}

double CoulombOmega::Compute( int l, int s, double T, double Lam, CsCalculator* TcS ) {
            
    /* Coulomb evalued collision integrals for attractive and repulsive potential on adimensional temperature (first row) */
    
    int ii = 0 ; 
    switch (l) {
        case 1:          
            ii = s*2 ;
            break;
        case 2:
            ii = 16 + (s - 2) * 2 ;
            break;
        case 3:
            ii = 26 + (s-3) * 2 ;
        case 4:
            ii = 32 ; 
        default:
            break;
    }

    if (sp1->getCharge() * sp2->getCharge() < 0)
        ii = ii -1 ;

    double tmp = (sp1->getCharge() * sp2->getCharge()*qe*qe) / (4.*std::numbers::pi*eps0*Lam) ;
    double Ts = fabs((KB*T)/tmp) ;
    double r = interp(qcTxt[0],qcTxt[ii], Ts) ;
    // Ang^2 
    return (std::numbers::pi*Lam*Lam*((r)/(Ts*Ts))) * 1.e+20 ;

}

NonCoulombOmega::NonCoulombOmega( InteractionInterface * i ) : OmegaCalculator ( i->GetSp1(),i->GetSp2() ) {

    interactionName = i->InteractionName() ;
    
    x = {

        4.448936583330000e-02, 2.345261095200000e-01, 5.768846293020000e-01,
        1.072448753820000e+00, 1.722408776440000e+00, 2.528336706430000e+00,
        3.492213272850000e+00, 4.616456772230000e+00, 5.903958483350000e+00,
        7.358126808600000e+00, 8.982941267319999e+00, 1.078301208900000e+01,
        1.276374547600000e+01, 1.493091179810000e+01, 1.729326613720000e+01,
        1.985362364930000e+01, 2.263577896240000e+01, 2.562014820240000e+01,
        2.887393368690000e+01, 3.233332940170000e+01, 3.611320422450000e+01,
        4.013373770560000e+01, 4.452240853620000e+01, 4.920866056650000e+01,
        5.435018133240000e+01, 5.987911928450000e+01, 6.598336170410001e+01,
        7.268426832220000e+01, 8.018837479059999e+01, 8.873519263900000e+01,
        9.882955231840000e+01, 1.117513982270000e+02    
        
    } ;

    w = { 

        1.092183419520000e-01, 2.104431079390000e-01, 2.352132296700000e-01,
        1.959033359720000e-01, 1.299837862990000e-01, 7.057862383360000e-02,
        3.176091251690000e-02, 1.191821413100000e-02, 3.738817412510000e-03,
        9.808024056860000e-04, 2.148681834090000e-04, 3.920659984700000e-05,
        5.934915843250000e-06, 7.427256330020000e-07, 7.626448776019999e-08,
        6.306269979150000e-09, 4.083620520820000e-10, 2.411939086390000e-11,
        8.426002364620000e-13, 3.986205037190000e-14, 8.863102475690000e-16,
        1.934387845810000e-17, 2.360234353520000e-19, 1.768420542500000e-21,
        1.542778242620000e-23, 5.284657979820000e-26, 1.386705626990000e-28,
        1.870542455720000e-31, 1.184149254940000e-34, 2.671721788680000e-38,
        1.338691853450000e-42, 4.510553591870000e-48

    } ;

}

NonCoulombOmega::NonCoulombOmega( InteractionInterface* i, TcsInterface* t, Potential* pot ) : NonCoulombOmega(i) {

    if (auto morsePot = dynamic_cast<Morse*>(pot)) 
        t->TCScalculator = new AvrgChiIntegrator(i, pot);
    else 
        t->TCScalculator = new AdaptChiIntegrator(i, pot);
    
}

double NonCoulombOmega::IntegrateOmega(int l, int s, double T, double Lam, CsCalculator* TcS) {
    
    try {
        std::vector<double> ln_e(TcS->E.size());
        std::vector<double> Qs((*TcS)(l).size());

        for (int i = 0; i < TcS->E.size(); ++i)
            ln_e[i] = log(TcS->E[i]);

        for (int i = 0; i < Qs.size(); ++i)
            Qs[i] = (*TcS)(l)[i];

        std::vector<double> f(x.size(), 0.0);
        for (int i = 0; i < x.size(); ++i) {
            double ee = log((KB * T * x[i]) / qe);
            double spline = interpolateSpline(ln_e, Qs, ee);
            f[i] = pow(x[i], s + 1) * spline / 2.0;
        }

        double fxw = std::inner_product(f.begin(), f.end(), w.begin(), 0.0);
        return fxw * (4. * (l + 1.)) / (factorial(s + 1) * (2. * l + 1. - pow(-1., l)));

    } catch ( const std::exception& ) {
        throw ;
    }
}

double NonCoulombOmega::MultiCompute(int l, int s, double T, double Lam, MultiCs* p) {
    std::vector<double> OmegaK;

    for (int i = 0; i < p->Size(); ++i) {
        if (auto ct = dynamic_cast<ChargeTransferCs*>((*p)[i])) {
            if (l % 2 == 0) return 0.0;
        }
        OmegaK.push_back(Compute(l, s, T, Lam, (*p)[i]));
    }

    double num = 0.0, den = 0.0;
    for (int i = 0; i < p->Size(); ++i) {
        num += OmegaK[i] * p->statesG[i];
        den += p->statesG[i];
    }

    if (den == 0.0) throw std::runtime_error("MultiCompute: degeneracy sum is zero.");

    return num / den;
}

double NonCoulombOmega::ModuleCompute(int l, int s, double T, double Lam, CsHolder* TcS) {
  
    double qel = Compute(l, s, T, Lam, TcS->Qe);
    double qin = Compute(l, s, T, Lam, TcS->Qin);
    return sqrt(pow(qel, 2.) + pow(qin, 2.));
}

double NonCoulombOmega::Compute(int l, int s, double T, double Lam, CsCalculator* TcS) {

    if ( TcS->computed == false ){
        TcS->Compute();
    }

    if (auto th = dynamic_cast<ThresholdCs*>(TcS))    
        return IntegrateOmega(l, s, T, Lam, th);

    if (auto multi = dynamic_cast<MultiCs*>(TcS))
        return MultiCompute(l, s, T, Lam, multi);

    if (auto holder = dynamic_cast<CsHolder*>(TcS))
        return ModuleCompute(l, s, T, Lam, holder);

    return IntegrateOmega(l, s, T, Lam, TcS);
}

ChargeExchangeOmega::ChargeExchangeOmega( InteractionInterface* i, OmegaCalculator* OMel, double A , double B ) : 
    OmegaCalculator(i->GetSp1(),i->GetSp2()), omegaEl(OMel),A(A),B(B){}

double ChargeExchangeOmega::Compute ( int l, int s, double temperatura, double lambda, CsCalculator* TcS ) {

    double Qel = omegaEl->Compute(l,s,temperatura,lambda,TcS) ; 

    if ( l%2 == 0 )
        
        return Qel ; 

    else {
        
        double M = (sp1->getMass()*sp2->getMass())/(sp1->getMass() + sp2->getMass()) ;
        M *= ( 1. / amuKg ) ; 

        const double R = 8314.462618e+4 ; // [erg / mol K°]
        double x = log(4.*R) ; 
        
        const double gamma = 0.577215664901532 ; 

        double z1 = 0. ;
        double z2 = 0. ; 
        for (int n = 1; n < s+2; n++ ){

            z1 += 1./n ; 
            z2 += 1./pow(n,2.); 

        }
        z1 -= gamma ;
        z2 -= pow(gamma,2.) ;

        double Qin = pow(A,2.) - (A*B*x) + pow(0.5*B*x,2.) + 
            (B*z1*0.5)*(B*x-2.*A) + (0.25*B*B) * (((std::numbers::pi*std::numbers::pi)/6.) - 
                z2) + ((0.5*B)*(B*(x+z1)-2.*A)*log(temperatura/M) + 
                        pow(0.5*B*log(temperatura/M),2.) ) ; 

        return sqrt ( pow(Qel,2.) + pow(Qin,2.) ) ; 
    
    }
}
